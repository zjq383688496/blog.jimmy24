'use strict';

var env = process.env.NODE_ENV || 'localhost';

var gulp        = require('gulp');
/* html */
var htmlmin     = require('gulp-htmlmin');		// html压缩
/* css */
var less        = require('gulp-less');			// less编译
var csso        = require('gulp-csso');			// css压缩
/* js */
var uglify      = require('gulp-uglify');		// js混淆
var jshint      = require('gulp-jshint');		// js校验
/* 文件操作 */
var concat      = require('gulp-concat');		// 文件合并
var clean       = require('gulp-clean');		// 文件清除
var sourcemaps  = require('gulp-sourcemaps');	// sourcemaps生成
/* 版本号管理 */
var rev         = require('gulp-rev');
var revReplace  = require('gulp-rev-replace');
/* server */
var nodemon     = require('gulp-nodemon');		// 自动部署
/* 工程相关 */
var runSequence = require('gulp-sequence');		// 执行队列

gulp.task('nodemon', function(cb) {
	return nodemon({
		script: 'bin/www',
		env: {
			NODE_ENV: env
		},
		ignore: ['upload', 'public/*'],
		ext: '*'
	});
});

gulp.task('default', ['build:localhost']);

/* 编译LESS */
gulp.task('less:dev', function() {
	var lessSrc = 'public/less/*.less';
	var cssDest = 'public/build/css';
	var manifest = gulp.src('./rev-manifest.json');
	return gulp.src(lessSrc)
		.pipe(less())
		.pipe(revReplace({
			manifest: manifest
		}))
		.pipe(csso())
		.pipe(rev())
		.pipe(gulp.dest(cssDest))
		.pipe(rev.manifest({
			base: 'public/build',
			merge: true
		}))
		.pipe(gulp.dest('build/assets'));
});

gulp.task('less:lo', function() {
	var lessSrc = 'public/less/*.less';
	var cssDest = 'public/css';
	return gulp.src(lessSrc)
		.pipe(sourcemaps.init({ loadMaps: true }))
		.pipe(less())
		.pipe(sourcemaps.write('/'))
		.pipe(gulp.dest(cssDest));
});

/* 复制压缩业务js */
gulp.task('js', function() {
	var jsSrc  = ['public/js/**/*.js', '!public/js/lib/*', '!public/js/{util,other}/**/*'];
	var jsDest = 'public/build/js';
	return gulp.src(jsSrc)
		// .pipe(jshint('.jshintrc'))
		// .pipe(jshint.reporter('default'))
		.pipe(rev())
		.pipe(uglify())
		.pipe(gulp.dest(jsDest))
		.pipe(rev.manifest({
			base: 'public/build',
			merge: true
		}))
		.pipe(gulp.dest('build/assets'));
});

/* 复制其他js */
gulp.task('otherjs', function() {
	var jsSrc  = ['public/js/other/**/*'];
	var jsDest = 'public/build/js/other';
	return gulp.src(jsSrc)
		.pipe(uglify())
		.pipe(gulp.dest(jsDest));
});

/* 合并lib.js */
gulp.task('concat', function() {
	var p = 'public/js/lib/';
	var jsSrc  = [p+'jquery.js', p+'bootstrap.js', p+'MJJS.js', p+'common.js'];
	var jsDest = 'public/build/js';
	gulp.src(jsSrc)
		.pipe(concat('lib.js'))
		.pipe(rev())
		.pipe(uglify())
		.pipe(gulp.dest(jsDest))
		.pipe(rev.manifest({
			base: 'public/build',
			merge: true
		}))
		.pipe(gulp.dest('build/assets'));
});

/* 复制valid.js */
gulp.task('valid', function() {
	var jsSrc  = ['public/js/lib/*.js'];
	var jsDest = 'public/build/js/lib';
	return gulp.src(jsSrc)
		.pipe(uglify())
		.pipe(gulp.dest(jsDest));
});

/* 复制通用插件 */
gulp.task('util', function() {
	var jsSrc  = ['public/js/util/**/*'];
	var jsDest = 'public/build/js/util';
	return gulp.src(jsSrc)
		.pipe(gulp.dest(jsDest));
});

/* 通用插件js压缩 */
gulp.task('utilJs', function() {
	var jsSrc  = ['public/js/util/**/*.js', '!public/js/util/**/*.min.js'];
	var jsDest = 'public/build/js/util';
	return gulp.src(jsSrc)
		.pipe(uglify())
		.pipe(gulp.dest(jsDest));
});

/* 通用插件css压缩 */
gulp.task('utilCss', function() {
	var cssSrc  = ['public/js/util/**/*.css', '!public/js/util/**/*.min.css'];
	var cssDest = 'public/build/js/util';
	return gulp.src(cssSrc)
		.pipe(csso())
		.pipe(gulp.dest(cssDest));
});

gulp.task('images', function() {
	return gulp.src('public/img/**/*')
		.pipe(rev())
		.pipe(gulp.dest('public/build/img'))
		.pipe(rev.manifest({
			base: 'public/build',
			merge: true
		}))
		.pipe(gulp.dest('build/assets'));
});

/* 字体Copy */
gulp.task('fonts', function() {
	return gulp.src('public/font/**/*')
		.pipe(gulp.dest('public/build/font'));
});

/* 文件Copy */
gulp.task('file', function() {
	return gulp.src('public/file/**/*')
		.pipe(gulp.dest('public/build/file'));
});

/* 模板压缩 */
gulp.task('htmlmin', function() {
	var manifest = gulp.src('./rev-manifest.json');
	return gulp.src('views/**/*.html')
		.pipe(revReplace({
			manifest: manifest
		}))
		.pipe(htmlmin({
			includeAutoGeneratedTags: false,		// 自动插入闭合标签 (handlebars模板引擎必须为false)
			removeComments: true,					// 删除HTML注释
			removeEmptyAttributes: true,			// 删除所有空格作属性值 <input id="" /> ==> <input />
			removeScriptTypeAttributes: true,		// 删除<script>的type="text/javascript"
			removeStyleLinkTypeAttributes: true,	// 删除<style>和<link>的type="text/css"
			collapseWhitespace: true,				// 压缩HTML
			collapseBooleanAttributes: true,		// 省略布尔属性的值 <input checked="true"/> ==> <input />
			minifyJS: true,							// 压缩页面JS
			minifyCSS: true							// 压缩页面CSS
		}))
		.pipe(gulp.dest('views/build'));
});

gulp.task('build:localhost', function() {
	env = 'localhost';
	return runSequence(
		'clean:init',	// 初始化清除文件
		'less:lo',		// 编译less
		'clean:end',	// 结束清除文件
		'nodemon'		// 代码部署
	)();
});

gulp.task('build:dev', function() {
	env = 'development';
	return runSequence(
		'clean:init',	// 初始化清除文件
		'concat',		// 合并js
		'js',			// 复制压缩业务js
		'otherjs',		// 复制其他js
		'images',		// 复制图片
		'fonts',		// 复制字体
		'file',			// 复制文件
		'less:dev',		// 编译less
		'util',			// 复制js插件
		'valid',		// 
		'utilJs',		// 插件js压缩
		'utilCss',		// 插件css压缩
		'htmlmin',		// 模板压缩
		'clean:end'		// 结束清除文件
		// ,'nodemon'		// 代码部署
	)();
});

gulp.task('clean:init', function () {
	return gulp.src(['views/build', 'public/build', 'public/css', 'public/dist', 'rev-manifest.json', 'upload/*'], {read: false}).pipe(clean());
});

gulp.task('clean:end', function () {
	return gulp.src(['public/dist', 'rev-manifest.json'], {read: false}).pipe(clean());
});